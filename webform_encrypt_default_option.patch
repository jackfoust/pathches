diff --git a/src/Element/WebformElementEncrypt.php b/src/Element/WebformElementEncrypt.php
index 412cc00..a7a8a93 100644
--- a/src/Element/WebformElementEncrypt.php
+++ b/src/Element/WebformElementEncrypt.php
@@ -46,6 +46,10 @@ class WebformElementEncrypt extends FormElement {
       ->getEncryptionProfileNamesAsOptions();
 
     if (count($encryption_options) > 0) {
+      // Determines if it is a new element to be added to the Webform.
+      $is_new_element = is_null($form_state->getFormObject()->getKey());
+
+      $default_encryption_enabled = $is_new_element ? (bool) webform_encrypt_get_third_party_setting('default_encryption_enabled', $webform) : FALSE;
       $element['element_encrypt']['encrypt'] = [
         '#type' => 'checkbox',
         '#title' => t("Encrypt this field's value"),
@@ -53,14 +57,15 @@ class WebformElementEncrypt extends FormElement {
           ':link' => Url::fromRoute('entity.encryption_profile.collection')
             ->toString(),
         ]),
-        '#default_value' => isset($config[$element_name]['encrypt']) ? $config[$element_name]['encrypt'] : FALSE,
+        '#default_value' => isset($config[$element_name]['encrypt']) ? $config[$element_name]['encrypt'] : $default_encryption_enabled,
       ];
 
+      $default_encrypt_profile = $is_new_element ? webform_encrypt_get_third_party_setting('default_encrypt_profile', $webform) : NULL;
       $element['element_encrypt']['encrypt_profile'] = [
         '#type' => 'select',
         '#title' => t('Select Encryption Profile'),
         '#options' => $encryption_options,
-        '#default_value' => isset($config[$element_name]['encrypt_profile']) ? $config[$element_name]['encrypt_profile'] : NULL,
+        '#default_value' => isset($config[$element_name]['encrypt_profile']) ? $config[$element_name]['encrypt_profile'] : $default_encrypt_profile,
         '#states' => [
           'visible' => [
             [':input[name="encrypt"]' => ['checked' => TRUE]],
diff --git a/webform_encrypt.module b/webform_encrypt.module
index d768e43..cd48952 100644
--- a/webform_encrypt.module
+++ b/webform_encrypt.module
@@ -6,6 +6,7 @@
  */
 
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\webform\Entity\Webform;
 
 /**
  * Implements hook_form_FORM_ID_alter().
@@ -47,3 +48,32 @@ function webform_encrypt_entity_type_alter(array &$entity_types) {
     $entity_types['webform_submission']->setAccessClass('Drupal\webform_encrypt\WebformEncryptSubmissionAccessControlHandler');
   }
 }
+
+/**
+ * Gets the value of a third party setting.
+ *
+ * @param string $key
+ *   The setting name.
+ * @param mixed $webform
+ *   The Webform object or NULL to retrieve a global setting.
+ * @param mixed $default_value
+ *   The default value in case of the settings doesn't exist.
+ *
+ * @return mixed
+ *   The setting value in case of success, the default value otherwise.
+ */
+function webform_encrypt_get_third_party_setting($key, Webform $webform = NULL, $default_value = NULL) {
+  // Returns the Webform specific third party setting.
+  if ($webform) {
+    $webform_settings = $webform->getThirdPartySettings('webform_encrypt');
+    if (isset($webform_settings[$key])) {
+      return $webform_settings[$key];
+    }
+  }
+
+  /** @var \Drupal\webform\WebformThirdPartySettingsManagerInterface $third_party_settings_manager */
+  $third_party_settings_manager = \Drupal::service('webform.third_party_settings_manager');
+
+  // Returns the global third party setting value or the default value.
+  return $third_party_settings_manager->getThirdPartySetting('webform_encrypt', $key, $default_value);
+}
diff --git a/webform_encrypt.webform.inc b/webform_encrypt.webform.inc
new file mode 100644
index 0000000..2ffc16c
--- /dev/null
+++ b/webform_encrypt.webform.inc
@@ -0,0 +1,88 @@
+<?php
+
+/**
+ * @file
+ * Integrates Webform Encrypt Third Party settings for the Webform module.
+ */
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Url;
+
+/**
+ * Attaches Third Party Webform Encrypt Form by reference.
+ *
+ * @param array $form
+ *   The Form array to be changed.
+ */
+function webform_encrypt_attach_third_party_settings_form(array &$form) {
+  $form['third_party_settings']['webform_encrypt'] = [
+    '#type' => 'details',
+    '#title' => t('Webform Encrypt'),
+    '#description' => t('Set the default encryption options for new elements.'),
+    '#open' => TRUE,
+  ];
+
+  $encryption_options = \Drupal::service('encrypt.encryption_profile.manager')->getEncryptionProfileNamesAsOptions();
+  if (!$encryption_options) {
+    $form['third_party_settings']['webform_encrypt']['no_encryption_options'] = ['#markup' => t('Configure an encryption profile to set the default encryption options.')];
+
+    return;
+  }
+
+  $encryption_settings_path = Url::fromRoute('entity.encryption_profile.collection')->toString();
+  $form['third_party_settings']['webform_encrypt']['default_encryption_enabled'] = [
+    '#type' => 'checkbox',
+    '#title' => t('Enable element encryption by default'),
+    '#description' => t('<a href=":link">Click here</a> to edit encryption settings.', [':link' => $encryption_settings_path]),
+  ];
+
+  $form['third_party_settings']['webform_encrypt']['default_encrypt_profile'] = [
+    '#type' => 'select',
+    '#title' => t('Encryption Profile'),
+    '#options' => $encryption_options,
+    '#states' => [
+      'visible' => [
+        [':input[name="third_party_settings[webform_encrypt][default_encryption_enabled]"]' => ['checked' => TRUE]],
+      ],
+    ],
+  ];
+}
+
+/**
+ * Implements hook_webform_admin_third_party_settings_form_alter().
+ */
+function webform_encrypt_webform_admin_third_party_settings_form_alter(&$form, FormStateInterface $form_state) {
+  webform_encrypt_attach_third_party_settings_form($form);
+
+  if (isset($form['third_party_settings']['webform_encrypt']['no_encryption_options'])) {
+    return;
+  }
+
+  // Sets default values.
+  $default_encryption_enabled = (bool) webform_encrypt_get_third_party_setting('default_encryption_enabled');
+  $form['third_party_settings']['webform_encrypt']['default_encryption_enabled']['#default_value'] = $default_encryption_enabled;
+
+  $default_encrypt_profile = webform_encrypt_get_third_party_setting('default_encrypt_profile');
+  $form['third_party_settings']['webform_encrypt']['default_encrypt_profile']['#default_value'] = $default_encrypt_profile;
+}
+
+/**
+ * Implements hook_webform_third_party_settings_form_alter().
+ */
+function webform_encrypt_webform_third_party_settings_form_alter(&$form, FormStateInterface $form_state) {
+  webform_encrypt_attach_third_party_settings_form($form);
+
+  if (isset($form['third_party_settings']['webform_encrypt']['no_encryption_options'])) {
+    return;
+  }
+
+  /** @var \Drupal\webform\WebformInterface $webform */
+  $webform = $form_state->getFormObject()->getEntity();
+
+  // Sets default values.
+  $default_encryption_enabled = (bool) webform_encrypt_get_third_party_setting('default_encryption_enabled', $webform);
+  $form['third_party_settings']['webform_encrypt']['default_encryption_enabled']['#default_value'] = $default_encryption_enabled;
+
+  $default_encrypt_profile = webform_encrypt_get_third_party_setting('default_encrypt_profile', $webform);
+  $form['third_party_settings']['webform_encrypt']['default_encrypt_profile']['#default_value'] = $default_encrypt_profile;
+}
